package _다이나믹프로그래밍

fun main() {
    val n = readlnOrNull()?.toInt() ?: return
    val dp = Array(n+1){0}
    if (n==1 || n == 3 ) return println(0)
    if (n==2) return println(3)
    dp[2] = 3
    dp[4] = 11
    for (i in 6..n step 2){
        dp[i] = dp[i-2]*4-dp[i-4]
    }
    println(dp[n])
}

// n = 1 -> 0

// n = 2 - > 3
// [] []
// [] []
// [] []

// n = 3 -> 0
// [] [] []
// [] [] []
// [] [] []

// n = 4 -> 11
// 3*3 + 2
// [] [] [] []
// [] [] [] []
// [] [] [] []

// n = 5 -> 0
// [] [] [] [] []
// [] [] [] [] []
// [] [] [] [] []

// n = 6
// [n -2] * 3 의 추가 배치
// 이 경우 [n-2]의 특수 케이스 2가지 추가 반복
// [] [] [] [] [] []
// [] [] [] [] [] []
// [] [] [] [] [] []
// 특수 경우는 dp[n-4]와 비슷한 패턴으로 -dp[n-4]
