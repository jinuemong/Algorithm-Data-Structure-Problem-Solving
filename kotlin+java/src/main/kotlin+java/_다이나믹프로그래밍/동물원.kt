package _다이나믹프로그래밍
fun main() {
    val n = readlnOrNull()?.toInt() ?: return
    val dp = Array(n){
        LongArray(3){ 1 }
    }
    for (i in 1..n-1){
        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]) % 9901
        dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % 9901
        dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % 9901
    }
    println(dp[n-1].sum() % 9901)
}

// 9 + 4 + 4 = 17
// a[n][0] = (a[n-1][0])*3
// a[n][1] = (a[n-1][1])*2
// a[n][2] = (a[n-1][2])*2


// n == 1

// [ ] [ ]
//  0   0
//  1   0
//  0   1  -> 3


// n == 2
// [ ] [ ]
// [ ] [ ]
// 00 -> 10,01,00
// 01 -> 00,10
// 10 -> 00,01
// -> 7


// n == 3
// [ ] [ ]
// [ ] [ ]
// [ ] [ ]
// 00 -> 10,01,00
// 01 -> 00,10
// 10 -> 00,01
// -> 7
// 00*3 -> (10,01,00) * 3
// 10*2 -> (00, 10) * 2
// 01*2 -> (00, 01) * 2
// 00*3+00*2+00*2, 10*3+10*2, 01*3+01*2
// 9 + 4 + 4 = 17
// a[n][0] = (a[n-1][0])*3
// a[n][1] = (a[n-1][1])*2
// a[n][2] = (a[n-1][2])*2


// 규칙
// 00인 경우 -> 3가지
// 01인 경우 -> 2가지
// 10인 경우 -> 2가지


// n  1 2  3 4 5
// 00 1 3  9
// 01 1 2  4
// 10 1 2  4
//    3 7 17
